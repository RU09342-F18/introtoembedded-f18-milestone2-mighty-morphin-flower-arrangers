#include <msp430.h>
#include "stdint.h"

#define testFlag 1  // testing flag

/* Global Variables*/
uint8_t lowBit = 0, highBit = 0;
float ADC_Voltage, temp;
float volt;
/* Init Methods*/
void UART_Init(void);
void ADC_Init(void);


int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT

ADC_Init();

UART_Init();

  while (1)
  {
    ADC12CTL0 |= ADC12SC;
#if testFlag == 0
    lowBit = ADC12MEM0;
    highBit = ADC12MEM0 >> 8;
#endif
    volt = ADC12MEM0;
    ADC_Voltage = (volt/4095) * 3.3;
    temp = -((330000-319190*(ADC_Voltage))/(4147*(ADC_Voltage)));


#if testFlag == 1
         while (!(UCA1IFG&UCTXIFG));           // USCI_A0 TX buffer ready?
                      UCA1TXBUF = (uint8_t)temp;
#elif testFlag == 0
    while (!(UCA1IFG&UCTXIFG));           // USCI_A0 TX buffer ready?
              UCA1TXBUF = highBit;    // TX -> RXed character

    while (!(UCA1IFG&UCTXIFG));         // USCI_A0 TX buffer ready?
              UCA1TXBUF = lowBit;    // TX -> RXed character
#endif
#if testFlag == 1
             __delay_cycles(1000000);
#endif
              __delay_cycles(1000);

    __bis_SR_register(GIE);     // LPM0, ADC12_ISR will force exit
    __no_operation();                       // For debugger
  }
}

#pragma vector = ADC12_VECTOR
__interrupt void ADC12_ISR(void)
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                  // Vector  6:  ADC12IFG0
    if (ADC12MEM0 >= 0x7ff)                 // ADC12MEM = A0 > 0.5AVcc?
      P1OUT |= BIT0;                        // P1.0 = 1
    else
      P1OUT &= ~BIT0;                       // P1.0 = 0

  case  8: break;                           // Vector  8:  ADC12IFG1
  case 10: break;                           // Vector 10:  ADC12IFG2
  case 12: break;                           // Vector 12:  ADC12IFG3
  case 14: break;                           // Vector 14:  ADC12IFG4
  case 16: break;                           // Vector 16:  ADC12IFG5
  case 18: break;                           // Vector 18:  ADC12IFG6
  case 20: break;                           // Vector 20:  ADC12IFG7
  case 22: break;                           // Vector 22:  ADC12IFG8
  case 24: break;                           // Vector 24:  ADC12IFG9
  case 26: break;                           // Vector 26:  ADC12IFG10
  case 28: break;                           // Vector 28:  ADC12IFG11
  case 30: break;                           // Vector 30:  ADC12IFG12
  case 32: break;                           // Vector 32:  ADC12IFG13
  case 34: break;                           // Vector 34:  ADC12IFG14
  default: break;
  }
}

// Echo back RXed character, confirm TX buffer is ready first
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)

{
  switch(__even_in_range(UCA1IV,4))
  {
  case 0:break;                             // Vector 0 - no interrupt
  case 2:                                   // Vector 2 - RXIFG
   //while (!(UCA1IFG&UCTXIFG));             // USCI_A0 TX buffer ready?
    //UCA1TXBUF = UCA1RXBUF; // Exit active CPU// TX -> RXed character
    break;
  case 4:break;                             // Vector 4 - TXIFG
  default: break;
  }
}
void UART_Init(){
    P4SEL |= BIT4+BIT5;
    P3SEL |= BIT3+BIT4;                       // P3.3,4 = USCI_A0 TXD/RXD
    UCA1CTL1 |= UCSWRST;                      // **Put state machine in reset**
    UCA1CTL1 |= UCSSEL_2;                     // SMCLK
    UCA1BR0 = 6;                              // 1MHz 9600 (see User's Guide)
    UCA1BR1 = 0;                              // 1MHz 9600
   // UCA1MCTL |= UCBRS_1 + UCBRF_0;            // Modulation UCBRSx=1, UCBRFx=0
    UCA1MCTL |= UCBRS_0 + UCBRF_13 +UCOS16;
    UCA1CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
    UCA1IE |= UCRXIE;// P1.0 output
}
void ADC_Init(){
    ADC12CTL0 = ADC12SHT02 + ADC12ON;         // Sampling time, ADC12 on
    ADC12CTL1 = ADC12SHP;                     // Use sampling timer
    ADC12IE = 0x01;                           // Enable interrupt
    ADC12CTL0 |= ADC12ENC;
    P6SEL |= 0x01;                            // P6.0 ADC option select
    P1DIR |= 0x01;
}
